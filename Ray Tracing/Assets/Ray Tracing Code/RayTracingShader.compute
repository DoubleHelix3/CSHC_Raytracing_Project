// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

RWTexture2D<float4> Result;
float4x4 _CameraToWorld;
float4x4 _CameraInverseProjection;

Texture2D<float4> _SkyboxTexture;
SamplerState sampler_SkyboxTexture;

static const float PI = 3.14159265f;

float2 _PixelOffsetForAntiAliasing;

//==========================================================================================================

// Spheres are a neat feature but, this will most likely be depreciated once triangles come into the picture
struct Sphere {
    float3 position;
    float radius;
    float3 color;
};

Sphere CreateSphere(float3 position, float radius, float3 color) {
    Sphere sphere;
    sphere.position = position;
    sphere.radius = radius;
    sphere.color = color;
    return sphere;
}

// There is a better way to do this with compute buffers, but this works for now. 
static int numberOfSpheres = 1;
Sphere spheres[1];

void InitializeObjects() {
    spheres[0] = CreateSphere(float3(0, 0.6f, 0.6f), 2, float3(0.8f, 0.6f, 0.6f));
}

//==========================================================================================================

struct Ray {
    float3 origin;
    float3 direction;
    float3 energy;
};

Ray CreateRay(float3 origin, float3 direction) {
    Ray ray;
    ray.origin = origin;
    ray.direction = direction;
    ray.energy = float3(1.0f, 1.0f, 1.0f);
    return ray;
}

Ray CreateCameraRay(float2 uv) {
    // Transform the camera origin to world space
    float3 origin = mul(_CameraToWorld, float4(0.0f, 0.0f, 0.0f, 1.0f)).xyz;

    // Invert the perspective projection of the view-space position
    float3 direction = mul(_CameraInverseProjection, float4(uv, 0.0f, 1.0f)).xyz;
    // Transform the direction from camera to world space and normalize
    direction = mul(_CameraToWorld, float4(direction, 0.0f)).xyz;
    direction = normalize(direction);

    return CreateRay(origin, direction);
}

struct RayHit {
    float3 position;
    float distance;
    float3 normal;
    float3 specular; // color for shading
};

RayHit CreateRayHit() {
    RayHit hit;
    hit.position = float3(0.0f, 0.0f, 0.0f);
    hit.distance = 1.#INF;
    hit.normal = float3(0.0f, 0.0f, 0.0f);
    hit.specular = float3(0.6f, 0.6f, 0.6f);
    return hit;
}

void IntersectGroundPlane(Ray ray, inout RayHit closestHit) {
    // Calculate distance along the ray where the ground plane is intersected
    float dist = -ray.origin.y / ray.direction.y;
    if (dist > 0 && dist < closestHit.distance) {
        closestHit.distance = dist;
        closestHit.position = ray.origin + dist * ray.direction;
        closestHit.normal = float3(0.0f, 1.0f, 0.0f);
    }
}

void IntersectSphere(Ray ray, inout RayHit closestHit, Sphere sphere) {
    // Calculate distance along the ray where the sphere is intersected
    float3 d = ray.origin - sphere.position;
    float p1 = -dot(ray.direction, d);
    float p2sqr = p1 * p1 - dot(d, d) + sphere.radius * sphere.radius;
    if (p2sqr < 0) return;
    float p2 = sqrt(p2sqr);
    float t = p1 - p2 > 0 ? p1 - p2 : p1 + p2;
    if (t > 0 && t < closestHit.distance) {
        closestHit.distance = t;
        closestHit.position = ray.origin + t * ray.direction;
        closestHit.normal = normalize(closestHit.position - sphere.position);
        closestHit.specular = sphere.color;
    }
}

RayHit Trace(Ray ray) {
    RayHit closestHit = CreateRayHit();

    for(int i = 0; i < numberOfSpheres; i++) {
        IntersectSphere(ray, closestHit, spheres[i]);
    }

    IntersectGroundPlane(ray, closestHit);

    return closestHit;
}

//==========================================================================================================

float3 Shade(inout Ray ray, RayHit hit) {
    if (hit.distance < 1.#INF) {
        // Reflect the ray and multiply energy with specular reflection
        ray.origin = hit.position + hit.normal * 0.001f;
        ray.direction = reflect(ray.direction, hit.normal);
        ray.energy *= hit.specular;
        // Return nothing
        return float3(0.0f, 0.0f, 0.0f);
    }
    else {
        // Erase the ray's energy - the sky doesn't reflect anything
        ray.energy = 0.0f;
        // Sample the skybox and write it
        float theta = acos(ray.direction.y) / -PI;
        float phi = atan2(ray.direction.x, -ray.direction.z) / -PI * 0.5f;
        return _SkyboxTexture.SampleLevel(sampler_SkyboxTexture, float2(phi, theta), 0).xyz;
    }
}

[numthreads(8, 8, 1)]
void CSMain(uint3 id : SV_DispatchThreadID) {    
    InitializeObjects();

    // Get the dimensions of the RenderTexture
    uint width, height;
    Result.GetDimensions(width, height);

    // Transform pixel to [-1,1] range
    float2 uv = float2((id.xy + _PixelOffsetForAntiAliasing) / float2(width, height) * 2.0f - 1.0f);

    // Get a ray for the UVs
    Ray ray = CreateCameraRay(uv);

    /// Trace and shade
    float3 result = float3(0, 0, 0);
    for (int i = 0; i < 8; i++) {
        RayHit hit = Trace(ray);
        result += ray.energy * Shade(ray, hit);
        if (!any(ray.energy)) break;
    }

    Result[id.xy] = float4(result, 1);
}